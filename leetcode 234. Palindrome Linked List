 class Solution {
    public boolean isPalindrome(ListNode head) {
        Stack<Integer> stack = new Stack<Integer>();
        boolean isPalindrome = true;
        ListNode current = head;
        while(current != null){
            stack.push(current.val);
            current = current.next;
        }
        while(head != null){
            int i = stack.pop();
            if(head.val == i){
                isPalindrome = true;
            }
            else{
                isPalindrome = false;
                break;
            }
            head = head.next;
            
        }
        return isPalindrome;
    }
}
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode prev = null;
        ListNode cur = head;
        while( cur != null ){
            ListNode temp = cur.next;
            cur.next = prev;
            prev = cur;
            cur = temp;
        }
        while(head != null){
            if(head.val != prev.val) return false;
            head = head.next;
            prev = prev.next;
        }
        return true;
    }
}
